# ===================================================================
# Spring Boot Application Properties
# for DEV environment
# ===================================================================

# This setting would change the root path for EVERYTHING (servlets, jpa repos, the public dir and custom rest endpoints)
# server.servlet.path=/servletPathPrefix

# ===================================================================
# Database settings
# For testing, an embedded in memory DB called "H2" is autoconfigured
# ===================================================================
# Create schema.sql script for initializing a database later in other environments
# https://stackoverflow.com/questions/37648395/how-to-see-the-schema-sql-ddl-in-spring-boot
# https://thoughts-on-java.org/standardized-schema-generation-data-loading-jpa-2-1/
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=build/schema.sql

# The DB schema can be created by spring JPA. Or you can use the build/schema.sql script which is written on first start of Liquido.
# (none, create, drop-and-create or drop)
spring.jpa.properties.javax.persistence.schema-generation.database.action=create

# ===================================================================
# In DEV spring-boot automatically starts an embedded in memory DB (H2-DB)
# Enable the H2 Web console for the embedded H2 DB. JDBC URL is   jdbc:h2:mem:testdb    username: sa   no password
# ===================================================================
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
#spring.datasource.username=sa
#spring.datasource.password=DefaultPwdIsEmpty

# ===================================================================
# Debugging logs
# ===================================================================
# Enable for a lot of fancy and helpful debug messages
#debug=true
#logging.level.web=TRACE
#logging.level.org.springframework=TRACE
#logging.level.org.springframework.web=TRACE

logging.level.org.doogie.liquido=DEBUG
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG

# Show Hibernate Schema creation   https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html#howto-initialize-a-database-using-hibernate
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.type=TRACE

#logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG

# Show all Hibernate JPA SQL commands during runtime including binding of sql query parameters to values. (needs debug=true)
# This significantly slows down the app and creates A LOT of debugging output. Watch your disk space!
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE


liquido.debug.log.includeResponsePayload=true


# ===================================================================
# Generate Swagger API docs
# ===================================================================
#springfox.documentation.swagger.v2.path=/liquido/v2/api-docs

# ===================================================================
# Liquido specific configuration parameters
# ===================================================================

# Version vom maven pom.xml
liquido.backend.version=@version@

# Number of likes that an idea needs to reach its quorum
liquido.supportersForProposal=10

# Number of day after creating a new poll until voting starts (if there are at least two proposals in that poll by then
liquido.daysUntilVotingStarts=14

# Duration of voting phase of a poll
liquido.durationOfVotingPhase=14

# How long is (the checksum of) a voterToken valid? Value is in HOURS.
liquido.checksumExpirationHours=24

# SECURITY: Salt for creating checksums of voterTokens.
# You must use the same salt for re-generating tokens and checksums after an application restart!
# This must be a valid BCrypt salt ie. begin with $2a$10$  !
liquido.bcrypt.salt=$2a$10$1IdrGrRAN2Wp3U7QI.JIzu

# A secret only known to the server. This ensures that only this server is able to create valid voterTokens and checksums
liquido.bcrypt.secret=liquidoServerSecret%324234!F

# URL of web frontend / client Vue App. This is used when requesting a login token via E-Mail in UserRestController.java
liquido.frontendUrl=http://localhost:3001

# In DEV and TEST environment this SMS login code is valid for any user.  SET THIS TO EMPTY IN PROD, except if you want to run tests against PROD.
liquido.devLoginToken=998877

# Parameters for sending E-Mails
liquido.smtp.host=smtp.ionos.de
liquido.smtp.port=587
liquido.smtp.from=liquido@doogie.de
liquido.smtp.fromname=LIQUIDO
liquido.smtp.username=robert@doogie.de
liquido.smtp.pass=XXXXXXX

# The user with this e-mail and name automatically becomes the admin user. An admin can delete polls and proposals!
liquido.admin.email=admin@liquido.de
liquido.admin.name=DEV Admin
liquido.admin.mobilephone=+491234567890
liquido.admin.picture=/static/img/avatars/Avatar16.png

