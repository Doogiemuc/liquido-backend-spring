# ===================================================================
# Spring Boot Application Properties
# for DEV environment.   These settings overwrite and extend the settings from application.properties
# ===================================================================

# ===================================================================
# DATABASE SETTINGS for DEV
# ===================================================================

spring.jpa.properties.javax.persistence.schema-generation.database.action=create

# Create a schema.sql script for initializing a database later in other environments
# https://stackoverflow.com/questions/37648395/how-to-see-the-schema-sql-ddl-in-spring-boot
# https://thoughts-on-java.org/standardized-schema-generation-data-loading-jpa-2-1/
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=build/schema.sql

# ===================================================================
# In DEV spring-boot automatically starts an embedded in memory DB (H2-DB)
# Enable the H2 Web console for the embedded H2 DB. JDBC URL is   jdbc:h2:mem:testdb    username: sa   no password
# ===================================================================
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

#spring.datasource.username=sa
#spring.datasource.password=DefaultPwdIsEmpty

# ===================================================================
# Quartz Job scheduler  (By default an in memory job store is used.)
# https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-quartz.html
# ===================================================================
#spring.quartz.job-store-type=jdbc
#spring.quartz.jdbc.initialize-schema=EMBEDDED

# ===================================================================
# Logging
# Since 10 years and three logging frameworks I am always re-learning, how to configure this simple logging format. It gives you clickable links in your IDE *G*
# ===================================================================
spring.output.ansi.enabled=ALWAYS
logging.pattern.console=%highlight(%-5level) %cyan(%-70.70(.\\(%file:%line\\).%method\\(\\))) | %message%n

logging.level.org.doogie.liquido=DEBUG
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG


# Enable this for a lot of fancy and helpful debug messages
#debug=true
#logging.level.web=TRACE
#logging.level.org.springframework=TRACE
#logging.level.org.springframework.web=TRACE

# Show Hibernate Schema creation https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html#howto-initialize-a-database-using-hibernate
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.type=TRACE

# Show all Hibernate JPA SQL commands during runtime including binding of sql query parameters to values. (needs debug=true)
# This significantly slows down the app and creates A LOT of debugging output. Watch your disk space!
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# ===================================================================
# Generate Swagger API docs
# ===================================================================
#springfox.documentation.swagger.v2.path=/liquido/v2/api-docs

# ===================================================================
# All secret properties must be set via a local application-<env>.yml  file!
