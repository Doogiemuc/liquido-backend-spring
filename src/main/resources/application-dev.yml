# ===================================================================
# LIQUIDO - Spring Boot Application Properties
#
# Settings for development in "dev" environment.
# These overwrite the settings from default application-local.yml
# ===================================================================

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# DO NOT USE THESE SETTINGS IN PROD!  YOU WILL LOSE ALL YOUR DATA!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

graphiql:
  #mapping: /graphiql
  #endpoint: /liquido-api/v3/graphql

# In DEV we let spring JPA automatically generate a database schema.
spring:
  # In DEV spring-boot automatically starts an embedded in memory DB (H2-DB)
  # Here we enable the H2 Web console for the embedded H2 DB. JDBC URL is   jdbc:h2:mem:testdb    username: sa   no password
  h2:
    console:
      enabled: true
      path: /h2-console

  jpa:
    # In DEV we let spring automatically generate the database schema
    # https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto-database-initialization
    generate-ddl: true
    hibernate:
    #  ddl-auto: none   # none, validate, update, create-drop (NEVER SET create-drop IN PROD!!! You will loose all your data!!!)

    # Properties are forwarded to hibernate https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto-configure-jpa-properties
    properties:
      hibernate:
        format_sql: false

      # In dev we can create a schema.sql script for initializing a database later in other environments
      # https://stackoverflow.com/questions/37648395/how-to-see-the-schema-sql-ddl-in-spring-boot
      # https://thoughts-on-java.org/standardized-schema-generation-data-loading-jpa-2-1/
      javax:
        persistence:
          schema-generation:
            database:
              action: create    # Must be set if you still want hibernate to create the actual schema in the DB in addition to the SQL file dump.
            scripts:
              action: create
              create-target: build/liquido-db-schema.sql

    # show SQL commands. (To see actual parameter values see logging for BasicBinder below.)
    #show-sql: true


# Uncomment this for a lot of fancy and helpful debug messages.  (Watch your disk space!)
# https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-logging-console-output
debug: true

# More logging in DEV
logging:
  level:
    root: INFO
    web: DEBUG
    #sql: TRACE
    org:
      doogie:
        liquido: DEBUG
      springframework:
        security: DEBUG
        web:
          filter:
            # Show HTTP requests
            CommonsRequestLoggingFilter: DEBUG

      # Show all Hibernate JPA SQL commands during runtime including binding of sql query parameters to values. (needs debug=true)
      # This significantly slows down the app and creates A LOT of debugging output. Watch your disk space!
      # (It took me days to find BasicBinder class :-)
      hibernate:
        #SQL: DEBUG
        type:
          descriptor:
            sql:
              #BasicBinder: TRACE

liquido:
  # You can load prepared testdata from a file. THIS SQL FILE MUST HAVE BEEN CREATED BEFORE!
  test:
    #recreateTestData: false
    #loadTestData: true
    #sampleDbFile: ./example-data/sampleDB-H2.sql



# ===================================================================
# Generate Swagger API docs
# ===================================================================
#springfox:
#  documentation:
#    swagger:
#      v2:
#        path: /liquido/v2/api-docs


# ===================================================================
# Liquido Settings for DEV. You can set them in a local application-dev.yml
# ===================================================================
