# ===================================================================
# COMMON SPRING BOOT PROPERTIES
#
# rename this file to application.properties and fill out USER and PASSWORD below
#
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

# Endpoint for the HATEOAS resources exposed by spring-data-rest (Which are also further configured in org.doogie.rest.RepositoryRestConfigurer.java)
spring.data.rest.base-path=/liquido/v2

# server.servlet.path=/servletPathPrefix   # this would change the root path for EVERYTHING

#springfox.documentation.swagger.v2.path=/liquido/v2/api-docs

# Port of running backend server  (default: 8080)
server.port=8080

# This will output SQL statements
#debug=true
#spring.jpa.show-sql=true

# Fance logging for (parts of) spring
#logging.level.org.springframework=DEBUG


####################################
# Database settings
# For testing, an embedded in memory DB called "H2" is autoconfigured
####################################

# Should tables on embedded H2 database be dropped on startup?
# one of    none, validate, update, create, create-drop(=default for embedded DBs)
# spring.jpa.hibernate.ddl-auto=validate
spring.jpa.hibernate.use-new-id-generator-mappings=true

# Enable the H2 Web console for the embedded H2 DB when testing. JDBC URL is   jdbc:h2:mem:testdb    username: sa   no password
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

############ This is how you could configure the connection to a JDBC database
#spring.datasource.url=jdbc:mysql://db_host/prod
#spring.datasource.username=dbuser
#spring.datasource.password=dbpass
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#################################################
# Security JWT and Oauth2
#################################################

security.oauth2.resource.filter-order=3

security.signing-key=secret-signing-key34
security.encoding-strength=256
security.security-realm=Liquido Security Realm

security.jwt.client-id=liquidoclientid
security.jwt.client-secret=liquido.slient:secret5
security.jwt.grant-type=password
security.jwt.scope-read=read
security.jwt.scope-write=write
security.jwt.resource-ids=liquidoresourceid







# http://stackoverflow.com/questions/24994440/no-serializer-found-for-class-org-hibernate-proxy-pojo-javassist-javassist
# spring.jackson.serialization.fail-on-empty-beans=false

## Use Googles JSON for (un)marshalling POJOs <-> JSON
spring.http.converters.preferred-json-mapper=gson

###################
# Logging
# Since 10 years and three logging frameworks I am always re-learning, how to configure this simple logging format. It gives you clickable links in your IDE *G*
#####################

spring.output.ansi.enabled=ALWAYS
logging.level.org.doogie.liquido=TRACE
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=TRACE
logging.pattern.console=%highlight(%-5level) %cyan(%-70.70(.\\(%file:%line\\).%method\\(\\))) | %message%n


##################################
# Number of likes that an idea needs to reach its quorum
liquido.supporters.for.proposal=10
liquido.days.until.voting.starts=14
liquido.duration.of.voting.phase=14

# Salt for creating secure hash values. This must be a valid BCrypt salt!
liquido.bcrypt.salt=$2a$10$1IdrGrRAN2Wp3U7QI.JIzu


