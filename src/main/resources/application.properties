# ===================================================================
# Spring Boot Application Properties
# for ALL environments
#
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

# Endpoint for the HATEOAS resources exposed by spring-data-rest (Which are also further configured in org.doogie.rest.LiquidoRepositoryRestConfigurer.java)
spring.data.rest.base-path=/liquido/v2

# Port of running backend server  (default: 8080)
server.port=8080

# ===================================================================
# Database settings
# ===================================================================
# Should the DB schema be created on startup.
# The default when using the embedded H2 database would be create-drop  => recreate everything from scratch
# But (depending on env) we are loading our schema from a SQL file.  => configured in applicaiton-<env>.properties
# one of    none, validate, update, create, and create-drop(default for embedded DBs)
# !!! DO __NOT__ SET "ddl-auto=create-drop" IN PRODUCTION OR YOU WILL LOOSE ALL YOUR DATA !!!
spring.jpa.hibernate.ddl-auto=none
#spring.jpa.hibernate.use-new-id-generator-mappings=true

# ===================================================================
# Json Web Token   JWT
# ===================================================================
app.jwt.secret=liquidoProdSecret
# miliseconds
app.jwt.expiration = 3600000
app.jwt.claims.refresh.name=refreshClaimName

# ===================================================================
# Quartz Job scheduler  (By default an in memory job store is used.)
# https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-quartz.html
# ===================================================================
#spring.quartz.job-store-type=jdbc
#spring.quartz.jdbc.initialize-schema=EMBEDDED

# http://stackoverflow.com/questions/24994440/no-serializer-found-for-class-org-hibernate-proxy-pojo-javassist-javassist
# spring.jackson.serialization.fail-on-empty-beans=false
# Force Jackson to serialize LocalDate and LocalDateTime iun ISO Date foramt instead of Array
#spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=true

## Use Googles JSON for (un)marshalling POJOs <-> JSON.
# spring.http.converters.preferred-json-mapper=gson


# ===================================================================
# Logging
# Since 10 years and three logging frameworks I am always re-learning, how to configure this simple logging format. It gives you clickable links in your IDE *G*
# ===================================================================
spring.output.ansi.enabled=ALWAYS
logging.level.org.doogie.liquido=INFO
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=INFO
logging.pattern.console=%highlight(%-5level) %cyan(%-70.70(.\\(%file:%line\\).%method\\(\\))) | %message%n


# ===================================================================
# Liquido specific configuration parameters
# ===================================================================

# Version vom maven pom.xml
liquido.backend.version=@version@

# Number of likes that an idea needs to reach its quorum
liquido.supportersForProposal=10

# Number of day after creating a new poll until voting starts (if there are at least two proposals in that poll by then
liquido.daysUntilVotingStarts=14

# Duration of voting phase of a poll
liquido.durationOfVotingPhase=14

# How long is a right to vote (hashed voterToken) valid? Value is in HOURS.
liquido.rightToVoteExpirationHours=24

# SECURITY: Salt for creating checksums of voterTokens.
# You must use the same salt for re-generating tokens and checksums after an application restart!
# This must be a valid BCrypt salt ie. begin with $2a$10$  !
liquido.bcrypt.salt=

# A secret only known to the server. This ensures that only this server is able to create valid voterTokens and checksums
liquido.bcrypt.secret=

# URL of web frontend / client Vue App. This is used when requesting a login token via E-Mail in UserRestController.java
liquido.frontendUrl=http://localhost:3001

# Parameters for sending emails
liquido.smtp.host=
liquido.smtp.port=
liquido.smtp.from=
liquido.smtp.fromname=
liquido.smtp.username=
liquido.smtp.pass=

# The user with this e-mail and name automatically becomes the admin user. An admin can delete polls and proposals!
liquido.admin.email=
liquido.admin.name=
liquido.admin.mobilephone=
liquido.admin.picture=