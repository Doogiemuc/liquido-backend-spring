# ===================================================================
# COMMON SPRING BOOT PROPERTIES
#
# rename this file to application.properties and fill out USER and PASSWORD below
#
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

# Endpoint for the HATEOAS resources exposed by spring-data-rest (Which are also further configured in org.doogie.rest.LiquidoRepositoryRestConfigurer.java)
spring.data.rest.base-path=/liquido/v2

# This setting would change the root path for EVERYTHING (servlets, jpa repos, the public dir and custom rest endpoints)
# server.servlet.path=/servletPathPrefix

# Port of running backend server  (default: 8080)
server.port=8080

####################################
# Database settings
# For testing, an embedded in memory DB called "H2" is autoconfigured
# H2 DB Web console: http://localhost:8080/h2-console   user:sa pwd:<empty>
####################################

# Should the DB schema be created on startup.
# The default when using the embedded H2 database would be create-drop  => recreate everything from scratch
# But (depending on env) we are loading our schema from a SQL file.  => configured in applicaiton-<env>.properties
# one of    none, validate, update, create, and create-drop(default for embedded DBs)
# !!! DO __NOT__ SET "ddl-auto=create-drop" IN PRODUCTION OR YOU WILL LOOSE ALL YOUR DATA !!!
spring.jpa.hibernate.ddl-auto=none
#spring.jpa.hibernate.use-new-id-generator-mappings=true

####################################
# Json Web Token   JWT
####################################
app.jwt.secret=liquidoSecret!37
# miliseconds
app.jwt.expiration = 3600000
app.jwt.claims.refresh.name=refreshClaimName


#################################################
# Quartz Job scheduler  (By default an in memory job store is used.)
# https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-quartz.html
#################################################

#spring.quartz.job-store-type=jdbc
#spring.quartz.jdbc.initialize-schema=EMBEDDED

#################################################
# Autogenerate Swagger API docs
#################################################

#springfox.documentation.swagger.v2.path=/liquido/v2/api-docs

# http://stackoverflow.com/questions/24994440/no-serializer-found-for-class-org-hibernate-proxy-pojo-javassist-javassist
# spring.jackson.serialization.fail-on-empty-beans=false

## Use Googles JSON for (un)marshalling POJOs <-> JSON
spring.http.converters.preferred-json-mapper=gson

###################
# Logging
# Since 10 years and three logging frameworks I am always re-learning, how to configure this simple logging format. It gives you clickable links in your IDE *G*
#####################

spring.output.ansi.enabled=ALWAYS
logging.level.org.doogie.liquido=TRACE
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=TRACE
logging.pattern.console=%highlight(%-5level) %cyan(%-70.70(.\\(%file:%line\\).%method\\(\\))) | %message%n


##################################
# Liquido Application properties
# The values of these properties will be read from DB. But they can be initialized here.
#

# Version vom maven pom.xml
liquido.backend.version=@version@

# Number of likes that an idea needs to reach its quorum
liquido.supporters.for.proposal=10

# Number of day after creating a new poll until voting starts (if there are at least two proposals in that poll by then
liquido.days.until.voting.starts=14

# Duration of voting phase of a poll
liquido.duration.of.voting.phase=14

# SECURITY: Salt for creating checksums of voterTokens. This must be a valid BCrypt salt ie. begin with $2a$10$!
liquido.bcrypt.salt=$2a$10$1IdrGrRAN2Wp3U7QI.JIzu

# A secret only known to the server. This ensures that only this server is able to create valid voterTokens and checksums
liquido.bcrypt.secret=liquidoServerSecret%324234!F

# How long is (the checksum of) a voterToken valid? Then it needs to be refreshed.
liquido.checksum.expiration.hours=24

# URL of web frontend / client Vue App. This is used when requesting a login token via E-Mail in UserRestController.java
liquido.frontendURL=http://localhost:3001

# Parameters for sending emails
smtp.host=
smtp.from=
smtp.fromname=
smtp.username=
smtp.pass=

# The user with this e-mail and name automatically becomes the admin user. An admin can delete polls and proposals!
liquido.admin.email=admin@liquido.de
liquido.admin.name=Secret Admin Name
liquido.admin.mobilephone=+491234567890