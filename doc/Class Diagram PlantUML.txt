@startuml
' Split into 4 pages
'page 2x2
'skinparam pageMargin 10
'skinparam pageExternalColor gray
'skinparam pageBorderColor black

package liquido.model {



DelegationModel --> AreaModel: delegation\nin area
LawModel --> AreaModel: law\nin area
PollModel ..> AreaModel: poll\nin area\n(calculated)
PollModel "0..1" <-> "N" LawModel: proposals{}\n in poll
BallotModel "N" --> "1" PollModel: ballot in poll
BallotModel "0..1" --> "N" LawModel: voteOrder[]: sorted\nproposals in ballot
BallotModel "1" -right-> "1" RightToVoteModel: right2Vote
DelegationModel <.up.> RightToVoteModel: No direct link\nTwo parallel trees
Team "1" -> "N" UserModel: members
Team "1" --> "N" PollModel: polls in team

' These are just for layout
' PollModel -[hidden]left-> DelegationModel
' UserModel -[hidden]> AreaModel
' KeyValueModel -[hidden]left> AreaModel
' OneTimeToken -[hidden]left> AreaModel

class AreaModel {
  Long id
  String title
  String description
  UserModel createdBy
}

class LawModel {
  Long ID
  String title
  String description
  AreaModel area
  LawStatus status = [
    IDEA, PROPOSAL, ELABORATION, VOTING, LAW
    LOST, RETENTION, RETRACTED]
  PollModel poll // is null when IDEA
  Set<UserModel> supporters
  List<CommentModel> comments
  Date reachedQuorumAt
  UserModel createdBy
  int getNumSupporters()
  int getNumComments()
  void setDescription()
  String toStringShort()
  ==
  LawModel is the central entity in LIQUIDO.
  An idea becomes a proposal when it reaches
  its quorum. Then it can join a poll.
}

class PollModel {
  Long ID
  Set<LawModel> proposals    // unsorted Set
  String status = [ELABORATION, VOTING, FINISHED]
  Date votingStartAt
  Date votingEndAt
  LawModel winner
  Matrix duelMatrix
  AreaModel getArea()
  int getNumCompetingProposals()
  ==
  A Poll contains proposals that joined the poll.
  Ballots should not be exposed before the poll is FINISHED.
}

class BallotModel {
  Long ID
  String checksum // calculated MD5
  int level
  PollModel poll
  RightToVodeModel rightToVote
  List<LawModel> voteOrder // sorted
  ==
  Every ballot is anonymous!
  The voteOrder in this ballot does not necessarily
  need to contain all proposals of a poll.
}

class DelegationModel {
  Long ID
  AreaModel area
  // a delegation is createdBy fromUser
  UserModel fromUser
  UserModel toProxy
  Date requestedDelegationAt
  RightToVoteModel requestedDelegationFrom
  boolean isDelegationRequest()
  ==
  A voter can delegate his right to vote to a proxy.
  If the proxy is not a public proxy, then the
  delegation can only be requested and must be accepted.
}

class RightToVoteModel {
  String hashedVoterToken // is ID
  AreaModel area
  RightToVoteModel delegatedTo
  UserModel publicProxy // may be null
  Date expiresAt
  --
  boolean isDelegated()
  ==
  Digital representation of a users right to vote.
  A user has one right to vote per area, ie.
  [area, publicProxy] must be unique.
  When user has a proxy, then his right2vote
  is delegated to the proxy.
}

class Team {
  Long ID
  String teamName
  String inviteCode
  Set<User> members
  Set<Poll> polls
}

class UserModel {
  Long ID
  String email
  String profile.name
  String profile.mobilephone
  String profile.website
  String profile.picture
  Date lastlogin
  ==
  linked to some entities as createdBy
}

' end package
}
@enduml